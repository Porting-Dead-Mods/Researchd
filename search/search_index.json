{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Researchd Wiki","text":"<p>Researchd is a mod that aims to add a Factorio-like research system to Minecraft, while also trying to be as modular and as addon friendly as possible.</p> <p>Yes, we went full circle.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>Any contribution would be gladly accepted through pull requests on our GitHub.</p>"},{"location":"addons/","title":"Addons","text":"<p>This page provides an in-depth guide on how to create addons for Researchd, including creating custom research effects, methods, and icons.</p>"},{"location":"addons/#researcheffect-interface","title":"<code>ResearchEffect</code> Interface","text":"<p>A <code>ResearchEffect</code> is triggered when a research is successfully completed. It's how you grant rewards to the player, such as unlocking recipes, giving items, or applying any other custom effect.</p> <p>To create a research effect, you need to implement the <code>ResearchEffect</code> interface.</p> <pre><code>public interface ResearchEffect {\n    void onUnlock(Level level, Player player, ResourceKey&lt;Research&gt; research);\n    ResourceLocation id();\n    ResearchEffectSerializer&lt;?&gt; getSerializer();\n}\n</code></pre>"},{"location":"addons/#key-methods","title":"Key Methods","text":"<ul> <li> <p><code>void onUnlock(Level level, Player player, ResourceKey&lt;Research&gt; research)</code>: This is the core method of the interface. It's called on the server side when the specified <code>research</code> is completed. You can use the <code>player</code> and <code>level</code> objects to apply your effects.</p> </li> <li> <p><code>ResearchEffectSerializer&lt;?&gt; getSerializer()</code>: Every research effect needs a serializer to handle networking and saving to disk. You'll need to create a serializer for your custom effect and return it here.</p> </li> </ul>"},{"location":"addons/#serialization-and-registration","title":"Serialization and Registration","text":"<p>To allow your <code>ResearchEffect</code> to be saved and synced, you need to create a <code>ResearchEffectSerializer</code> and register it.</p> <ol> <li> <p>Create the Serializer: Create a class that implements <code>ResearchEffectSerializer&lt;YourResearchEffect&gt;</code>. You'll need to implement <code>codec()</code> and <code>streamCodec()</code>.</p> </li> <li> <p>Register the Serializer: In your main mod class, use a <code>DeferredRegister</code> to register your serializer instance.</p> <pre><code>public static final DeferredRegister&lt;ResearchEffectSerializer&lt;?&gt;&gt; SERIALIZERS = DeferredRegister.create(ResearchdRegistries.RESEARCH_EFFECT_SERIALIZER_KEY, YourModClass.MODID);\n\npublic static final Supplier&lt;ResearchEffectSerializer&lt;?&gt;&gt; YOUR_EFFECT_SERIALIZER = SERIALIZERS.register(\"your_effect\", () -&gt; YourResearchEffect.SERIALIZER);\n</code></pre> </li> </ol>"},{"location":"addons/#researchmethod-interface","title":"<code>ResearchMethod</code> Interface","text":"<p>A <code>ResearchMethod</code> defines how a research is performed. It's the \"how\" of the research process, whether it's consuming items, spending time, or any other custom logic.</p> <p>To create a research method, you need to implement the <code>ResearchMethod</code> interface.</p> <pre><code>public interface ResearchMethod {\n    void checkProgress(Level level, ResourceKey&lt;Research&gt; research, ResearchProgress.Task task, MethodContext context);\n    ResearchProgress createProgress();\n    float getMaxProgress();\n    ResourceLocation id();\n    ResearchMethodSerializer&lt;?&gt; getSerializer();\n}\n</code></pre>"},{"location":"addons/#key-methods_1","title":"Key Methods","text":"<ul> <li><code>void checkProgress(Level level, ResourceKey&lt;Research&gt; research, ResearchProgress.Task task, MethodContext context)</code>: This method is called periodically to check and update the progress of a research. You can add progress to the <code>task</code> object here.</li> <li><code>ResearchProgress createProgress()</code>: This method should return a <code>ResearchProgress</code> object that represents the initial state of your research method.</li> <li><code>float getMaxProgress()</code>: The maximum progress value for this research method.</li> </ul>"},{"location":"addons/#serialization-and-registration_1","title":"Serialization and Registration","text":"<p>Similar to <code>ResearchEffect</code>, your <code>ResearchMethod</code> needs a serializer.</p> <ol> <li> <p>Create the Serializer: Create a class that implements <code>ResearchMethodSerializer&lt;YourResearchMethod&gt;</code>.</p> </li> <li> <p>Register the Serializer: In your main mod class, use a <code>DeferredRegister</code> to register your serializer.</p> <pre><code>public static final DeferredRegister&lt;ResearchMethodSerializer&lt;?&gt;&gt; SERIALIZERS = DeferredRegister.create(ResearchdRegistries.RESEARCH_METHOD_SERIALIZER, YourModClass.MODID);\n\npublic static final Supplier&lt;ResearchMethodSerializer&lt;?&gt;&gt; YOUR_METHOD_SERIALIZER = SERIALIZERS.register(\"your_method\", () -&gt; YourResearchMethod.Serializer.INSTANCE);\n</code></pre> </li> </ol>"},{"location":"addons/#researchicon-interface","title":"<code>ResearchIcon</code> Interface","text":"<p>The <code>ResearchIcon</code> is a utility interface containing the id as well as the object that renders for the icon. The actual rendering of the icon is handled on the client side through a <code>ClientResearchIcon</code> class.</p> <p>To create a custom research icon, you need to implement the <code>ResearchIcon</code> interface, and a corresponding <code>ClientResearchIcon</code> for the rendering.</p>"},{"location":"addons/#valueeffect-interface","title":"<code>ValueEffect</code> Interface","text":"<p>The <code>ValueEffect</code> interface allows you to create custom numerical values that can be associated with a research team and modified by research effects. This is useful for creating upgradeable stats or other dynamic properties.</p> <p>To create a value effect, you need to implement the <code>ValueEffect</code> interface and register it.</p> <pre><code>public interface ValueEffect {\n    default ResourceLocation getKey() {\n        return ResearchdRegistries.VALUE_EFFECT.getKey(this);\n    }\n\n    default void onUnlock(ResearchTeam team, Level level) {\n    }\n}\n</code></pre> <p>Then, you can use the <code>IncreaseValueEffect</code>, <code>DecreaseValueEffect</code>, <code>MultiplyValueEffect</code>, and <code>DivideValueEffect</code> research effects to modify your custom value.</p>"},{"location":"data/","title":"Data Structure","text":"<p>This page shows an example of the JSON structure for a research file. This is an in-game example that can be created with the command <code>/researchd example datapack</code>.</p> <p>This example is for a research that unlocks oak planks after the player consumes 8 dirt and 1 wheat seeds.</p> <pre><code>{\n  \"type\": \"researchd:simple\",\n  \"parents\": [],\n  \"requires_parent\": false,\n  \"icon\": [\n    {\n      \"id\": \"minecraft:oak_log\",\n      \"count\": 1\n    }\n  ],\n  \"method\": {\n    \"methods\": [\n      {\n        \"item\": {\n          \"item\": \"minecraft:dirt\"\n        },\n        \"count\": 8,\n        \"type\": \"researchd:consume_item\"\n      },\n      {\n        \"item\": {\n          \"item\": \"minecraft:wheat_seeds\"\n        },\n        \"count\": 1,\n        \"type\": \"researchd:consume_item\"\n      }\n    ],\n    \"type\": \"researchd:and\"\n  },\n  \"effect\": {\n    \"recipes\": [\n      \"minecraft:oak_planks\"\n    ],\n    \"type\": \"researchd:unlock_recipe\"\n  }\n}\n</code></pre>"},{"location":"data/#field-explanations","title":"Field Explanations","text":""},{"location":"data/#type","title":"<code>type</code>","text":"<ul> <li>Description: The type of the research. For now, this should always be <code>researchd:simple</code>.</li> <li>Type: <code>String</code></li> </ul>"},{"location":"data/#parents","title":"<code>parents</code>","text":"<ul> <li>Description: A list of parent researches that must be completed before this research can be started (unless <code>requires_parent</code> is <code>false</code>).</li> <li>Type: <code>Array</code> of <code>String</code> (Resource Locations)</li> <li>Example: <code>\"parents\": [\"researchd:cobblestone\"]</code></li> </ul>"},{"location":"data/#requires_parent","title":"<code>requires_parent</code>","text":"<ul> <li>Description: If <code>true</code>, all parent researches must be completed before this research is unlocked. If <code>false</code>, this research is unlocked at the start.</li> <li>Type: <code>Boolean</code></li> </ul>"},{"location":"data/#icon","title":"<code>icon</code>","text":"<ul> <li>Description: The icon to be displayed for this research. It is a list of <code>ItemStack</code> objects, which will be cycled through in the UI.</li> <li>Type: <code>Array</code> of <code>Object</code></li> <li>Object Structure:<ul> <li><code>id</code>: The item's resource location.</li> <li><code>count</code>: The item's stack size.</li> </ul> </li> </ul>"},{"location":"data/#method","title":"<code>method</code>","text":"<ul> <li>Description: The method required to complete the research. This is an object that can be one of several types.</li> <li>Type: <code>Object</code></li> </ul>"},{"location":"data/#method-types","title":"Method Types","text":"<ul> <li><code>researchd:consume_item</code>: Requires the player to have a certain amount of an item in their inventory, which will be consumed.<ul> <li><code>item</code>: An <code>Ingredient</code> object representing the item to consume.</li> <li><code>count</code>: The number of items to consume.</li> </ul> </li> <li><code>researchd:consume_pack</code>: Requires the player to use a research pack in the Research Lab.<ul> <li><code>packs</code>: A list of research pack resource locations.</li> <li><code>count</code>: The number of packs to consume.</li> <li><code>duration</code>: The time in ticks it takes to consume one pack.</li> </ul> </li> <li><code>researchd:and</code>: A list of methods that all need to be completed.<ul> <li><code>methods</code>: An array of <code>method</code> objects.</li> </ul> </li> <li><code>researchd:or</code>: A list of methods where only one needs to be completed.<ul> <li><code>methods</code>: An array of <code>method</code> objects.</li> </ul> </li> </ul>"},{"location":"data/#effect","title":"<code>effect</code>","text":"<ul> <li>Description: The effect that occurs when the research is completed.</li> <li>Type: <code>Object</code></li> </ul>"},{"location":"data/#effect-types","title":"Effect Types","text":"<ul> <li><code>researchd:unlock_recipe</code>: Unlocks one or more recipes.<ul> <li><code>recipes</code>: An array of recipe resource locations.</li> </ul> </li> <li><code>researchd:dimension_unlock</code>: Unlocks a dimension for the player.<ul> <li><code>dimension</code>: The resource location of the dimension to unlock.</li> <li><code>icon_sprite</code> (optional): The resource location of the icon to display for this effect.</li> </ul> </li> <li><code>researchd:and</code>: A list of effects that will all be triggered.<ul> <li><code>effects</code>: An array of <code>effect</code> objects.</li> </ul> </li> <li><code>researchd:empty</code>: No effect.</li> </ul>"},{"location":"gameplay/","title":"Gameplay","text":"<p>This page provides an overview of the core gameplay mechanics of the Researchd mod.</p>"},{"location":"gameplay/#the-research-screen","title":"The Research Screen","text":"<p>The Research Screen is the central hub for all your research activities. It can be opened with a dedicated keybind (check your keybind settings).</p> <p>The screen is composed of several key components:</p>"},{"location":"gameplay/#the-research-graph","title":"The Research Graph","text":"<p>The largest part of the screen is the Research Graph. This is a visual representation of the entire research tree. You can pan to navigate the tree and see how different researches are connected.</p>"},{"location":"gameplay/#the-tech-list","title":"The Tech List","text":"<p>On the left side of the screen, you'll find the Tech List. This is a searchable and filterable list of all available researches. You can use this to quickly find a specific research you're looking for.</p>"},{"location":"gameplay/#the-research-queue","title":"The Research Queue","text":"<p>At the top of the screen is the Research Queue. This widget shows the researches you are currently working on. The research at the front of the queue is the one that is actively being progressed. You can add, remove, and reorder researches in the queue.</p>"},{"location":"gameplay/#the-selected-research-widget","title":"The Selected Research Widget","text":"<p>When you select a research from the graph or the tech list, its details will be displayed in the Selected Research Widget. This widget will show all the Research Methods and Effects of the research.</p>"},{"location":"gameplay/#the-research-lab","title":"The Research Lab","text":"<p>The Research Lab is a multiblock structure that is essential for progressing through certain research paths. Specifically, it is used for researches that require <code>ConsumePackResearchMethod</code>.</p>"},{"location":"gameplay/#the-team-research-screen","title":"The Team Research Screen","text":"<p>The Team Research screen allows you to manage your research team. It can be opened by pressing 'M' (default).</p>"},{"location":"gameplay/#main-screen","title":"Main Screen","text":"<p>The main screen provides an overview of your team:</p> <ul> <li>Members List: A list of all current team members and their roles.</li> <li>Recent Researches: A list of the most recently completed researches by your team.</li> <li>Invite Player: A button to invite other players to your team. (Required Permission: 1 - Moderator)</li> <li>Settings: A button to open the team settings screen. (Required Permission: 1+ - Moderator / Owner)</li> </ul>"},{"location":"gameplay/#team-settings","title":"Team Settings","text":"<p>The settings screen provides more advanced options for managing your team:</p> <ul> <li>Change Team Name: (Required Permission: 2 - Owner)</li> <li>Manage Members: (Owner: Promote / Demote / Kick - Moderator: Kick)</li> <li>Transfer Ownership: (Required Permission: 2 - Owner)</li> <li>Leave Team: Owner must transfer ownership to someone else before leaving.</li> </ul>"},{"location":"datagen/java/","title":"Java Data Generation","text":"<p>You can register new researches and research packs using the <code>BootstrapContext</code> in your data generation. Researches and research packs are <code>DataPackRegistries</code>, meaning they are loaded from data packs.</p>"},{"location":"datagen/java/#research-packs","title":"Research Packs","text":"<p>Here is an example of how to register a new research pack:</p> <pre><code>import com.portingdeadmods.researchd.ResearchdRegistries;\nimport com.portingdeadmods.researchd.api.research.packs.ResearchPack;\nimport net.minecraft.data.worldgen.BootstrapContext;\nimport net.minecraft.resources.ResourceKey;\n\npublic final class YourModResearchPacks {\n    public static final ResourceKey&lt;SimpleResearchPack&gt; OVERWORLD = key(\"overworld\");\n\n    public static void bootstrap(BootstrapContext&lt;SimpleResearchPack&gt; context) {\n        register(context, OVERWORLD, SimpleResearchPack.builder()\n                .sortingValue(1)\n                .color(222, 0, 0)\n        );\n    }\n\n    private static void register(BootstrapContext&lt;SimpleResearchPack&gt; context, ResourceKey&lt;SimpleResearchPack&gt; key, SimpleResearchPack.Builder builder) {\n        context.register(key, builder.build());\n    }\n\n    private static ResourceKey&lt;SimpleResearchPack&gt; key(String name) {\n        return ResourceKey.create(ResearchdRegistries.RESEARCH_PACK_KEY, YourMod.rl(name));\n    }\n}\n</code></pre>"},{"location":"datagen/java/#researches","title":"Researches","text":"<p>Here is an example of how to register a new research:</p> <pre><code>import com.portingdeadmods.researchd.ResearchdRegistries;\nimport com.portingdeadmods.researchd.api.research.Research;\nimport com.portingdeadmods.researchd.impl.research.SimpleResearch;\nimport com.portingdeadmods.researchd.impl.research.method.ConsumeItemResearchMethod;\nimport net.minecraft.data.worldgen.BootstrapContext;\nimport net.minecraft.resources.ResourceKey;\nimport net.minecraft.world.item.Items;\nimport net.minecraft.world.item.crafting.Ingredient;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.UnaryOperator;\n\npublic final class YourModResearches {\n    private static final Map&lt;ResourceKey&lt;Research&gt;, Research.Builder&lt;?&gt;&gt; RESEARCHES = new HashMap&lt;&gt;();\n\n    public static final ResourceKey&lt;Research&gt; WOOD = register(\"wood\", builder -&gt; builder\n            .icon(Items.OAK_LOG)\n            .researchMethod(\n                    new ConsumeItemResearchMethod(Ingredient.of(Items.DIRT), 8)\n            ));\n\n    public static void bootstrap(BootstrapContext&lt;Research&gt; context) {\n        for (Map.Entry&lt;ResourceKey&lt;Research&gt;, Research.Builder&lt;?&gt;&gt; research : RESEARCHES.entrySet()) {\n            register(context, research.getKey(), research.getValue());\n        }\n    }\n\n    private static void register(BootstrapContext&lt;Research&gt; context, ResourceKey&lt;Research&gt; key, Research.Builder&lt;?&gt; builder) {\n        context.register(key, builder.build());\n    }\n\n    private static ResourceKey&lt;Research&gt; key(String name) {\n        return ResourceKey.create(ResearchdRegistries.RESEARCH_KEY, YourMod.rl(name));\n    }\n\n    private static ResourceKey&lt;Research&gt; register(String name, UnaryOperator&lt;SimpleResearch.Builder&gt; builder) {\n        ResourceKey&lt;Research&gt; key = key(name);\n        RESEARCHES.put(key, builder.apply(SimpleResearch.Builder.of()));\n        return key;\n    }\n}\n</code></pre>"},{"location":"datagen/kubejs/","title":"KubeJS Data Generation","text":"<p>Researchd provides full support for KubeJS for both event scripting and data generation.</p>"},{"location":"datagen/kubejs/#creating-researches-and-packs","title":"Creating Researches and Packs","text":"<p>You can create new researches and research packs using the <code>ResearchdEvents</code> group in your KubeJS startup scripts.</p>"},{"location":"datagen/kubejs/#creating-a-research-pack","title":"Creating a Research Pack","text":"<p>Use the <code>ResearchdEvents.registerResearchPacks</code> event to create new packs.</p> <pre><code>ResearchdEvents.registerResearchPacks(event =&gt; {\n    event.create(\"kubejs:my_custom_pack\")\n        .sortingValue(100)\n        .color(123, 45, 67);\n\n    event.create(\"kubejs:another_pack\")\n        .sortingValue(101)\n        .colorRGB(12, 34, 56);\n});\n</code></pre>"},{"location":"datagen/kubejs/#researchpackbuilder-methods","title":"ResearchPackBuilder Methods","text":"Method Description <code>color(color)</code> Sets the color of the pack. Can be a hex integer or a <code>KubeColor</code>. <code>colorRGB(r, g, b)</code> Sets the color of the pack using RGB values. <code>customTexture(texture)</code> Sets a custom texture for the pack. The texture should be a <code>ResourceLocation</code> string. <code>sortingValue(value)</code> A value to dictate where in the progression the research pack should be. Lower = earlier, higher = later."},{"location":"datagen/kubejs/#creating-a-research","title":"Creating a Research","text":"<p>Use the <code>ResearchdEvents.registerResearches</code> event to create new researches.</p> <pre><code>ResearchdEvents.registerResearches(event =&gt; {\n    event.create(\"kubejs:my_custom_research\")\n        .icon(\"minecraft:diamond\")\n        .parents(\"researchd:wood\") // You can reference existing researches here\n        .method(ResearchMethodHelper.consumeItem(\"minecraft:dirt\", 16))\n        .effect(ResearchEffectHelper.unlockRecipe(\"minecraft:diamond_block\"));\n\n    event.create(\"kubejs:another_research\")\n        .icon(\"minecraft:stone_bricks\")\n        .parent(\"researchd:cobblestone\")\n        .consumePack(\"kubejs:my_custom_pack\", 5, 10)\n        .effect(ResearchEffectHelper.unlockRecipe(\"minecraft:stone_bricks\"))\n        .literalName('Example Research')\n        .literalDescription('This is an example research created with KubeJS.');\n});\n</code></pre>"},{"location":"datagen/kubejs/#researchbuilder-methods","title":"ResearchBuilder Methods","text":"Method Description <code>icon(itemId)</code> Sets the icon for the research. <code>method(researchMethod)</code> Sets the research method. Use <code>ResearchMethodHelper</code> to create methods. <code>consumeItem(itemId, count)</code> Shortcut for <code>.method(ResearchMethodHelper.consumeItem(itemId, count))</code>. <code>consumePack(packId, ...args)</code> Shortcut for <code>.method(ResearchMethodHelper.consumePack(packId, ...args))</code>. <code>requireAllMethods(...methods)</code> Shortcut for <code>.method(ResearchMethodHelper.and(...methods))</code>. <code>requireAnyMethod(...methods)</code> Shortcut for <code>.method(ResearchMethodHelper.or(...methods))</code>. <code>effect(researchEffect)</code> Sets the research effect. Use <code>ResearchEffectHelper</code> to create effects. <code>unlockRecipe(recipeId)</code> Shortcut for <code>.effect(ResearchEffectHelper.unlockRecipe(recipeId))</code>. <code>unlockMultipleRecipes(...recipeIds)</code> Shortcut for <code>.effect(ResearchEffectHelper.unlockRecipes(...recipeIds))</code>. <code>unlockDimension(dimensionId, ...args)</code> Shortcut for <code>.effect(ResearchEffectHelper.unlockDimension(dimensionId, ...args))</code>. <code>combineEffects(...effects)</code> Shortcut for <code>.effect(ResearchEffectHelper.and(...effects))</code>. <code>parent(researchId)</code> Adds a parent research. <code>parents(...researchIds)</code> Adds multiple parent researches. <code>noParentRequired()</code> Sets that this research does not require its parents to be completed. <code>literalName(name)</code> Sets a literal name for the research, ignoring translations. <code>literalDescription(desc)</code> Sets a literal description for the research, ignoring translations."},{"location":"datagen/kubejs/#helpers","title":"Helpers","text":""},{"location":"datagen/kubejs/#researchmethodhelper","title":"ResearchMethodHelper","text":"Method Description <code>consumeItem(itemId, count)</code> Creates a method that requires consuming a certain amount of an item. <code>consumePack(packId, count)</code> Creates a method that requires consuming a certain amount of a research pack. <code>consumePack(packId, count, duration)</code> Creates a method that requires consuming a certain amount of a research pack with a specific duration. <code>and(...methods)</code> Creates a method that requires all of the specified methods to be completed. <code>or(...methods)</code> Creates a method that requires any of the specified methods to be completed."},{"location":"datagen/kubejs/#researcheffecthelper","title":"ResearchEffectHelper","text":"Method Description <code>empty()</code> Creates an empty effect that does nothing. <code>unlockRecipe(recipeId)</code> Creates an effect that unlocks a single recipe. <code>unlockRecipes(...recipeIds)</code> Creates an effect that unlocks multiple recipes. <code>unlockDimension(dimensionId)</code> Creates an effect that unlocks a dimension. <code>unlockNether()</code> Creates an effect that unlocks the Nether. <code>unlockEnd()</code> Creates an effect that unlocks the End. <code>and(...effects)</code> Combines multiple effects into one, executing all of them. <code>combine(effects)</code> Combines a list of effects into one, executing all of them."},{"location":"datagen/kubejs/#event-scripting","title":"Event Scripting","text":"<p>You can listen for the following events in your KubeJS scripts:</p>"},{"location":"datagen/kubejs/#research-completed","title":"Research Completed","text":"<p>This event is fired when a player completes a research.</p> <pre><code>// Example event listener\nResearchdEvents.researchCompleted(event =&gt; {\n    console.log(`Player ${event.player.username} completed research ${event.researchId}`);\n});\n</code></pre>"},{"location":"datagen/kubejs/#research-progress","title":"Research Progress","text":"<p>This event is fired when a player makes progress on a research.</p> <pre><code>// Example event listener\nResearchdEvents.researchProgress(event =&gt; {\n    console.log(`Player ${event.player.username} has ${event.progressPercent}% progress on research ${event.researchId}`);\n});\n</code></pre>"}]}