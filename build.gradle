plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.23'
    id 'net.darkhax.curseforgegradle' version '1.1.15'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    mavenCentral()

    maven { url 'https://jitpack.io' }
    maven {url "https://maven.latvian.dev/releases" }

    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "com.github.Porting-Dead-Mods:Porting-Dead-Libs:${pdl_version}"
    compileOnly "dev.latvian.mods:kubejs-neoforge:${kubejs_version}"
    compileOnly "dev.latvian.mods:rhino-neoforge:${rhino_version}"
    localRuntime "dev.latvian.mods:kubejs-neoforge:${kubejs_version}"
    localRuntime "dev.latvian.mods:rhino-neoforge:${rhino_version}"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

java {
    withSourcesJar()
    withJavadocJar()
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

if (System.getenv('CURSEFORGE_TOKEN')) {
    task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

        apiToken = System.getenv('CURSEFORGE_TOKEN')
        disableVersionDetection()

        // Upload main jar
        def mainFile = upload(curseforge_project_id, jar)
        mainFile.changelog = System.getenv('CHANGELOG') ?: 'See GitHub for changes'
        mainFile.changelogType = 'markdown'
        mainFile.releaseType = System.getenv('RELEASE_TYPE') ?: 'release'
        mainFile.displayName = "${mod_id}-${mod_version}-${minecraft_version}"
        mainFile.addGameVersion minecraft_version
        mainFile.addModLoader 'NeoForge'

        // Add sources and javadoc as additional files
        def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
        sourcesFile.displayName = "${mod_id}-${mod_version}-${minecraft_version}-sources"

        def javadocFile = mainFile.withAdditionalFile(javadocJar)
        javadocFile.displayName = "${mod_id}-${mod_version}-${minecraft_version}-javadoc"
    }
}